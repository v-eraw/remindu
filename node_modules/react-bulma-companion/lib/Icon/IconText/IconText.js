"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = IconText;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _excluded = ["children", "className", "color", "component"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function IconText(_ref) {
  var children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      component = _ref.component,
      props = _objectWithoutProperties(_ref, _excluded);

  var Element = component; // Colors

  var colorMap = {
    primary: 'has-text-primary',
    link: 'has-text-link',
    info: 'has-text-info',
    success: 'has-text-success',
    warning: 'has-text-warning',
    danger: 'has-text-danger',
    white: 'has-text-white',
    black: 'has-text-black',
    light: 'has-text-light',
    dark: 'has-text-dark',
    'black-bis': 'has-text-black-bis',
    'black-ter': 'has-text-black-ter',
    'grey-dark': 'has-text-grey-dark',
    grey: 'has-text-grey',
    'grey-light': 'has-text-grey-light',
    'grey-lighter': 'has-text-grey-lighter',
    'white-ter': 'has-text-white-ter',
    'white-bis': 'has-text-white-bis',
    'primary-light': 'has-text-primary-light',
    'link-light': 'has-text-link-light',
    'info-light': 'has-text-info-light',
    'success-light': 'has-text-success-light',
    'warning-light': 'has-text-warning-light',
    'danger-light': 'has-text-danger-light',
    'primary-dark': 'has-text-primary-dark',
    'link-dark': 'has-text-link-dark',
    'info-dark': 'has-text-info-dark',
    'success-dark': 'has-text-success-dark',
    'warning-dark': 'has-text-warning-dark',
    'danger-dark': 'has-text-danger-dark'
  };
  var isColor = color && colorMap[color];
  var classes = (0, _classnames["default"])('icon-text', className, isColor);
  return /*#__PURE__*/_react["default"].createElement(Element, _extends({
    className: classes
  }, props), children);
}

IconText.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  color: _propTypes["default"].oneOf(['primary', 'link', 'info', 'success', 'warning', 'danger', 'white', 'black', 'light', 'dark', 'black-bis', 'black-ter', 'grey-dark', 'grey', 'grey-light', 'grey-lighter', 'white-ter', 'white-bis', 'primary-light', 'link-light', 'info-light', 'success-light', 'warning-light', 'danger-light', 'primary-dark', 'link-dark', 'info-dark', 'success-dark', 'warning-dark', 'danger-dark'])
};
IconText.defaultProps = {
  className: undefined,
  children: null,
  color: undefined,
  component: 'span'
};