"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Columns;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _excluded = ["centered", "children", "className", "component", "mobile", "mobileGap", "desktop", "desktopGap", "desktopOnlyGap", "fullhdGap", "gap", "gapless", "multiline", "tabletGap", "tabletOnlyGap", "touchGap", "vcentered", "widescreenGap", "widescreenOnlyGap"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var gaps = ['0', '1', '2', '3', '4', '5', '6', '7', '8'];
var gapMap = {};
var mobileGapMap = {};
var tabletGapMap = {};
var touchGapMap = {};
var desktopGapMap = {};
var widescreenGapMap = {};
var fullhdGapMap = {};
var tabletOnlyGapMap = {};
var desktopOnlyGapMap = {};
var widescreenOnlyGapMap = {};
gaps.forEach(function (gap) {
  gapMap[gap] = "is-".concat(gap);
  mobileGapMap[gap] = "is-".concat(gap, "-mobile");
  tabletGapMap[gap] = "is-".concat(gap, "-tablet");
  touchGapMap[gap] = "is-".concat(gap, "-touch");
  desktopGapMap[gap] = "is-".concat(gap, "-desktop");
  widescreenGapMap[gap] = "is-".concat(gap, "-widescreen");
  fullhdGapMap[gap] = "is-".concat(gap, "-fullhd");
  tabletOnlyGapMap[gap] = "is-".concat(gap, "-tablet-only");
  desktopOnlyGapMap[gap] = "is-".concat(gap, "-desktop-only");
  widescreenOnlyGapMap[gap] = "is-".concat(gap, "-widescreen-only");
});

function Columns(_ref) {
  var centered = _ref.centered,
      children = _ref.children,
      className = _ref.className,
      component = _ref.component,
      mobile = _ref.mobile,
      mobileGap = _ref.mobileGap,
      desktop = _ref.desktop,
      desktopGap = _ref.desktopGap,
      desktopOnlyGap = _ref.desktopOnlyGap,
      fullhdGap = _ref.fullhdGap,
      gap = _ref.gap,
      gapless = _ref.gapless,
      multiline = _ref.multiline,
      tabletGap = _ref.tabletGap,
      tabletOnlyGap = _ref.tabletOnlyGap,
      touchGap = _ref.touchGap,
      vcentered = _ref.vcentered,
      widescreenGap = _ref.widescreenGap,
      widescreenOnlyGap = _ref.widescreenOnlyGap,
      props = _objectWithoutProperties(_ref, _excluded);

  var Element = component;
  var isGap = gap && gapMap[gap];
  var isMobileGap = mobileGap && mobileGapMap[mobileGap];
  var isTabletGap = tabletGap && tabletGapMap[tabletGap];
  var isTouchGap = touchGap && touchGapMap[touchGap];
  var isDesktopGap = desktopGap && desktopGapMap[desktopGap];
  var isWidescreenGap = widescreenGap && widescreenGapMap[widescreenGap];
  var isFullhdGap = fullhdGap && fullhdGapMap[fullhdGap];
  var isTabletOnlyGap = tabletOnlyGap && tabletOnlyGapMap[tabletOnlyGap];
  var isDesktopOnlyGap = desktopOnlyGap && desktopOnlyGapMap[desktopOnlyGap];
  var isWidescreenOnlyGap = widescreenOnlyGap && widescreenOnlyGapMap[widescreenOnlyGap];
  var classes = (0, _classnames["default"])('columns', className, isGap, isMobileGap, isTabletGap, isTouchGap, isDesktopGap, isWidescreenGap, isFullhdGap, isTabletOnlyGap, isDesktopOnlyGap, isWidescreenOnlyGap, {
    'is-mobile': mobile,
    'is-desktop': desktop,
    'is-centered': centered,
    'is-vcentered': vcentered,
    'is-gapless': gapless,
    'is-multiline': multiline,
    'is-variable': !!gap || !!mobileGap || !!tabletGap || !!touchGap || !!desktopGap || !!widescreenGap || !!fullhdGap || !!tabletOnlyGap || !!desktopOnlyGap || !!widescreenOnlyGap
  });
  return /*#__PURE__*/_react["default"].createElement(Element, _extends({
    className: classes
  }, props), children);
}

Columns.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  gap: _propTypes["default"].oneOf(gaps),
  mobileGap: _propTypes["default"].oneOf(gaps),
  tabletGap: _propTypes["default"].oneOf(gaps),
  touchGap: _propTypes["default"].oneOf(gaps),
  desktopGap: _propTypes["default"].oneOf(gaps),
  widescreenGap: _propTypes["default"].oneOf(gaps),
  fullhdGap: _propTypes["default"].oneOf(gaps),
  tabletOnlyGap: _propTypes["default"].oneOf(gaps),
  desktopOnlyGap: _propTypes["default"].oneOf(gaps),
  widescreenOnlyGap: _propTypes["default"].oneOf(gaps),
  mobile: _propTypes["default"].bool,
  desktop: _propTypes["default"].bool,
  centered: _propTypes["default"].bool,
  vcentered: _propTypes["default"].bool,
  gapless: _propTypes["default"].bool,
  multiline: _propTypes["default"].bool
};
Columns.defaultProps = {
  className: undefined,
  children: null,
  component: 'div',
  gap: undefined,
  mobileGap: undefined,
  tabletGap: undefined,
  touchGap: undefined,
  desktopGap: undefined,
  widescreenGap: undefined,
  fullhdGap: undefined,
  tabletOnlyGap: undefined,
  desktopOnlyGap: undefined,
  widescreenOnlyGap: undefined,
  mobile: false,
  desktop: false,
  centered: false,
  vcentered: false,
  gapless: false,
  multiline: false
};