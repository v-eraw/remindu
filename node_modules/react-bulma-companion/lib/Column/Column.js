"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Column;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _excluded = ["children", "className", "component", "desktopOffset", "desktopSize", "fullhdOffset", "fullhdSize", "mobileOffset", "mobileSize", "narrow", "narrowMobile", "narrowTablet", "narrowTouch", "narrowDesktop", "narrowWidescreen", "narrowFullhd", "offset", "size", "tabletOffset", "tabletSize", "touchOffset", "touchSize", "widescreenOffset", "widescreenSize"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var sizes = ['full', 'half', 'one-third', 'two-thirds', 'one-quarter', 'three-quarters', 'one-fifth', 'two-fifths', 'three-fifths', 'four-fifths', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
var sizeMap = {};
var offsetMap = {};
var mobileSizeMap = {};
var mobileOffsetMap = {};
var tabletSizeMap = {};
var tabletOffsetMap = {};
var touchSizeMap = {};
var touchOffsetMap = {};
var desktopSizeMap = {};
var desktopOffsetMap = {};
var widescreenSizeMap = {};
var widescreenOffsetMap = {};
var fullhdSizeMap = {};
var fullhdOffsetMap = {};
sizes.forEach(function (size) {
  sizeMap[size] = "is-".concat(size);
  offsetMap[size] = "is-offset-".concat(size);
  mobileSizeMap[size] = "is-".concat(size, "-mobile");
  mobileOffsetMap[size] = "is-offset-".concat(size, "-mobile");
  tabletSizeMap[size] = "is-".concat(size, "-tablet");
  tabletOffsetMap[size] = "is-offset-".concat(size, "-tablet");
  touchSizeMap[size] = "is-".concat(size, "-touch");
  touchOffsetMap[size] = "is-offset-".concat(size, "-touch");
  desktopSizeMap[size] = "is-".concat(size, "-desktop");
  desktopOffsetMap[size] = "is-offset-".concat(size, "-desktop");
  widescreenSizeMap[size] = "is-".concat(size, "-widescreen");
  widescreenOffsetMap[size] = "is-offset-".concat(size, "-widescreen");
  fullhdSizeMap[size] = "is-".concat(size, "-fullhd");
  fullhdOffsetMap[size] = "is-offset-".concat(size, "-fullhd");
});

function Column(_ref) {
  var children = _ref.children,
      className = _ref.className,
      component = _ref.component,
      desktopOffset = _ref.desktopOffset,
      desktopSize = _ref.desktopSize,
      fullhdOffset = _ref.fullhdOffset,
      fullhdSize = _ref.fullhdSize,
      mobileOffset = _ref.mobileOffset,
      mobileSize = _ref.mobileSize,
      narrow = _ref.narrow,
      narrowMobile = _ref.narrowMobile,
      narrowTablet = _ref.narrowTablet,
      narrowTouch = _ref.narrowTouch,
      narrowDesktop = _ref.narrowDesktop,
      narrowWidescreen = _ref.narrowWidescreen,
      narrowFullhd = _ref.narrowFullhd,
      offset = _ref.offset,
      size = _ref.size,
      tabletOffset = _ref.tabletOffset,
      tabletSize = _ref.tabletSize,
      touchOffset = _ref.touchOffset,
      touchSize = _ref.touchSize,
      widescreenOffset = _ref.widescreenOffset,
      widescreenSize = _ref.widescreenSize,
      props = _objectWithoutProperties(_ref, _excluded);

  var Element = component;
  var isSize = size && sizeMap[size];
  var isOffset = offset && offsetMap[offset];
  var isMobileSize = mobileSize && mobileSizeMap[mobileSize];
  var isMobileOffset = mobileOffset && mobileOffsetMap[mobileOffset];
  var isTabletSize = tabletSize && tabletSizeMap[tabletSize];
  var isTabletOffset = tabletOffset && tabletOffsetMap[tabletOffset];
  var isTouchSize = touchSize && touchSizeMap[touchSize];
  var isTouchOffset = touchOffset && touchOffsetMap[touchOffset];
  var isDesktopSize = desktopSize && desktopSizeMap[desktopSize];
  var isDesktopOffset = desktopOffset && desktopOffsetMap[desktopOffset];
  var isWidescreenSize = widescreenSize && widescreenSizeMap[widescreenSize];
  var isWidescreenOffset = widescreenOffset && widescreenOffsetMap[widescreenOffset];
  var isFullhdSize = fullhdSize && fullhdSizeMap[fullhdSize];
  var isFullhdOffset = fullhdOffset && fullhdOffsetMap[fullhdOffset];
  var classes = (0, _classnames["default"])('column', className, isSize, isOffset, isMobileSize, isMobileOffset, isTabletSize, isTabletOffset, isTouchSize, isTouchOffset, isDesktopSize, isDesktopOffset, isWidescreenSize, isWidescreenOffset, isFullhdSize, isFullhdOffset, {
    'is-narrow': narrow,
    'is-narrow-mobile': narrowMobile,
    'is-narrow-tablet': narrowTablet,
    'is-narrow-touch': narrowTouch,
    'is-narrow-desktop': narrowDesktop,
    'is-narrow-widescreen': narrowWidescreen,
    'is-narrow-fullhd': narrowFullhd
  });
  return /*#__PURE__*/_react["default"].createElement(Element, _extends({
    className: classes
  }, props), children);
}

Column.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  size: _propTypes["default"].oneOf(sizes),
  offset: _propTypes["default"].oneOf(sizes),
  mobileSize: _propTypes["default"].oneOf(sizes),
  mobileOffset: _propTypes["default"].oneOf(sizes),
  tabletSize: _propTypes["default"].oneOf(sizes),
  tabletOffset: _propTypes["default"].oneOf(sizes),
  touchSize: _propTypes["default"].oneOf(sizes),
  touchOffset: _propTypes["default"].oneOf(sizes),
  desktopSize: _propTypes["default"].oneOf(sizes),
  desktopOffset: _propTypes["default"].oneOf(sizes),
  widescreenSize: _propTypes["default"].oneOf(sizes),
  widescreenOffset: _propTypes["default"].oneOf(sizes),
  fullhdSize: _propTypes["default"].oneOf(sizes),
  fullhdOffset: _propTypes["default"].oneOf(sizes),
  narrow: _propTypes["default"].bool,
  narrowMobile: _propTypes["default"].bool,
  narrowTablet: _propTypes["default"].bool,
  narrowTouch: _propTypes["default"].bool,
  narrowDesktop: _propTypes["default"].bool,
  narrowWidescreen: _propTypes["default"].bool,
  narrowFullhd: _propTypes["default"].bool
};
Column.defaultProps = {
  className: undefined,
  children: null,
  component: 'div',
  size: undefined,
  offset: undefined,
  mobileSize: undefined,
  mobileOffset: undefined,
  tabletSize: undefined,
  tabletOffset: undefined,
  touchSize: undefined,
  touchOffset: undefined,
  desktopSize: undefined,
  desktopOffset: undefined,
  widescreenSize: undefined,
  widescreenOffset: undefined,
  fullhdSize: undefined,
  fullhdOffset: undefined,
  narrow: false,
  narrowMobile: false,
  narrowTablet: false,
  narrowTouch: false,
  narrowDesktop: false,
  narrowWidescreen: false,
  narrowFullhd: false
};